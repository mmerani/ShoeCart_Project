/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI_Classes;

import Shoe_Cart_Classes.AccountList;
import Shoe_Cart_Classes.Customer;
import Shoe_Cart_Classes.Product;
import Shoe_Cart_Classes.Seller;
import Shoe_Cart_Classes.Session;
import java.text.DecimalFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Michael
 */
public class ItemsScreen extends javax.swing.JFrame {

      /**
     * 
     * @param _Database
     * @param currentSession 
     */
    public ItemsScreen(AccountList _Database, Session currentSession) {
        initComponents();
        sneakerDataBase = _Database;
        this.currentSession = currentSession;
        currentUser = (Customer)sneakerDataBase.retrieve(currentSession.getUserInSession());
        this.loadInventoryFromAllSellers();
        this.loadCartTotal();
        this.setLocationRelativeTo(null);
        this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        cartTotal = new javax.swing.JTextField();
        logOutButton = new javax.swing.JButton();
        accountButton = new javax.swing.JButton();
        viewCartButton = new javax.swing.JButton();
        clearCartButton = new javax.swing.JButton();
        addToCartButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        jLabel1.setText("Sneaker Palace");

        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Prodcut", "Product ID", "Price", "In Stock", "Quantity", "Seller", "Purchase"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(productTable);

        jLabel2.setText("Estimated Total:");

        cartTotal.setText("$0.00");

        logOutButton.setText("Log Out");
        logOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutButtonActionPerformed(evt);
            }
        });

        accountButton.setText("Account Info");
        accountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accountButtonActionPerformed(evt);
            }
        });

        viewCartButton.setText("View Cart");
        viewCartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewCartButtonActionPerformed(evt);
            }
        });

        clearCartButton.setText("Clear Cart");
        clearCartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearCartButtonActionPerformed(evt);
            }
        });

        addToCartButton.setText("Add To Cart");
        addToCartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToCartButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cartTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addToCartButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearCartButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewCartButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(logOutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 141, Short.MAX_VALUE)
                                .addComponent(jLabel1)
                                .addGap(123, 123, 123)
                                .addComponent(accountButton))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(accountButton)
                            .addComponent(logOutButton))))
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(cartTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(viewCartButton)
                            .addComponent(clearCartButton)
                            .addComponent(addToCartButton))))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void logOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutButtonActionPerformed
        this.dispose();
        SignInScreen backToLoginScreen = new SignInScreen(sneakerDataBase);
        backToLoginScreen.setVisible(true);
    }//GEN-LAST:event_logOutButtonActionPerformed

    private void accountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accountButtonActionPerformed
        this.dispose();
        CustomerScreen buyersAccount = new CustomerScreen(sneakerDataBase, currentSession);
        buyersAccount.setVisible(true);
    }//GEN-LAST:event_accountButtonActionPerformed

    private void addToCartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToCartButtonActionPerformed
         // This action adds items from the MarketPlace into the Customers Cart
        // This first checks to see if the following conditions are met: 
        // Are there any items in the MarketPlace, and are there any rows selected
        // via the checkboxes? If both of these conditions fail then a warning is issued
        // and actions are prevented from continuing. If thats no the case, then the program 
        // checks each row and looks for checked boxes. At the instance the checkboxes are found
        // the following actions occur in the program:
        
        // The seller of the product is retrieved from the database, the Product ID is grabbed from the JTable,
        // the item is fetched from the Sellers inventory via the product ID, the quantity that is going to be
        // purchased is grabbed from the JTable, an array which contains the current limit in stock for each item
        // is referenced to see if the user is able to buy the amount of product that is specified. If the quantity is
        // greater than what is in stock then the program issues a warning, in the instance that the product stock has 
        // reached zero, the program also issues another warning on the screen. If the user for some reason attempts to
        // buy negative quantities (yes idiots like that exist), another warning is issued. Any warnings issued prevent
        // the action from continuing any further.
        
        // if all conditions for a successful purchase are satisfied, then the item is added to the cart.
        // If the item is already in the cart and the user simply wanted to add more quantity. The item in the cart
        // is referenced and the quantity attribute of the product is simply changed. At this point, the referenced array
        // we are using to keep track of the number of stock is reduced in respect to the proper number. 
        
        // at the end the cart total is always recalcuated after purchase.
        
        DefaultTableModel theProductTable = (DefaultTableModel) productTable.getModel();
        Seller theSeller; String productID; Product itemPurchased; Integer quantitySold;
        Product productToAdd; Product itemInCart; int itemLimit;
        
        if(productTable.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "There are no items to purchase", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        for(int i = 0; i < productTable.getRowCount(); i++) {
            boolean isChecked = (boolean)productTable.getValueAt(i, 6);
            if(isChecked) {
                break;
            }
            else if(i == productTable.getRowCount() - 1) {
                JOptionPane.showMessageDialog(null, "No items are selected for purchase", "Error", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }
        
        for(int i = 0; i < productTable.getRowCount(); i++) {
            boolean isChecked = (boolean)productTable.getValueAt(i, 6);
            
            if(isChecked) {
                theSeller = (Seller)sneakerDataBase.retrieve((String)theProductTable.getValueAt(i, 5));
                productID = (String)theProductTable.getValueAt(i, 1);
                itemPurchased = theSeller.getList().getProductInstance(productID);
                quantitySold = (Integer)theProductTable.getValueAt(i, 4);
                itemLimit = itemStockCountForMarketPlace.get(i);
                
                if(quantitySold > itemPurchased.getQuantity()) {
                    JOptionPane.showMessageDialog(null, "Cannot purchase more than whats in stock.", "Error", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                
                if(quantitySold > itemLimit) {
                    JOptionPane.showMessageDialog(null, "Cannot purchase more than whats in stock.", "Error", JOptionPane.WARNING_MESSAGE);
                    
                     if(itemLimit == 0) {
                        JOptionPane.showMessageDialog(null, "Purchase limit has been reached for this item.", "Error", JOptionPane.WARNING_MESSAGE);
                    }
                    return;
                }
                
                if(quantitySold <= 0) {
                    if(quantitySold == 0)
                        JOptionPane.showMessageDialog(null, "You have no specified a quantity", "Error", JOptionPane.WARNING_MESSAGE);
                    else
                        JOptionPane.showMessageDialog(null, "You cannot purchase negative amounts", "Error", JOptionPane.WARNING_MESSAGE);
                    
                    return;
                }
                
                if(currentUser.getShoppingCart().search(productID)) {
                    itemInCart = currentUser.getShoppingCart().getProductInstance(productID);
                    itemInCart.setQuantity(itemInCart.getQuantity() + quantitySold);
                    itemLimit -= quantitySold;
                }
                else {
                   productToAdd = new Product(itemPurchased);
                   productToAdd.setQuantity(quantitySold);
                   currentUser.getShoppingCart().add(productToAdd);
                   itemLimit -= quantitySold;
                }
                
                itemStockCountForMarketPlace.set(i, itemLimit);
                theProductTable.setValueAt(0, i, 4);
            }
        }
        
        DecimalFormat df = new DecimalFormat("#.##");
        cartTotal.setText("$" + df.format(currentUser.getShoppingCart().calculateShoppingCartTotal()));
        resetCheckBoxes();
        
        JOptionPane.showMessageDialog(null, "Items added to Cart!", "Success", JOptionPane.INFORMATION_MESSAGE);
        
        System.out.println(currentUser);
    }//GEN-LAST:event_addToCartButtonActionPerformed

    private void clearCartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearCartButtonActionPerformed
        // this simply clears the users cart, recalculates the cart total (which is always
        // zeroed out) and takes our reference array for stock count and replenishes the original quantities
        // displayed in the jtable
        currentUser.getShoppingCart().clear();
        DecimalFormat df = new DecimalFormat("#.##");
        cartTotal.setText("$" + df.format(currentUser.getShoppingCart().calculateShoppingCartTotal()));
        resetCheckBoxes();
        
        itemStockCountForMarketPlace.clear();
        ArrayList<Seller> sellerList = sneakerDataBase.getAllSellers();
        ArrayList<Product> allItems = null;
        
        // adds back original stock quantites to array
        for(Seller seller : sellerList) {
            allItems = seller.getList().getAllItems();
            for(Product item : allItems) {
                itemStockCountForMarketPlace.add(item.getQuantity());
            }
        }
    }//GEN-LAST:event_clearCartButtonActionPerformed

    private void viewCartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewCartButtonActionPerformed
        this.dispose();
        CheckOutScreen theCheckOutScreen = new CheckOutScreen(sneakerDataBase, currentSession);
        theCheckOutScreen.setVisible(true);
    }//GEN-LAST:event_viewCartButtonActionPerformed

   private void loadInventoryFromAllSellers() {
        // this one is essentially pretty self explanatory. Each seller in the database and their
        // inventory is access and uploaded t othe jtable.
        DefaultTableModel theProductTable = (DefaultTableModel) productTable.getModel();
        ArrayList<Seller> sellerList = sneakerDataBase.getAllSellers();
        ArrayList<Product> allItems = null; 
        itemStockCountForMarketPlace = new ArrayList<>();
        
        for(Seller seller : sellerList) {
            allItems = seller.getList().getAllItems();
            for(Product item : allItems) {
                theProductTable.addRow(new Object[]{item.getName(), item.getID(), item.getSellingPrice(), item.getQuantity(), 
                                                    0, seller.getUserName(), false});
                
                itemStockCountForMarketPlace.add(item.getQuantity());
            }
        }
        
        replaceItemStockCount();
    }
    
    /**
     * Resets all the check boxes on the JTable
     */
    private void resetCheckBoxes() {
        DefaultTableModel theProductTable = (DefaultTableModel) productTable.getModel();
        for(int i = 0; i < productTable.getRowCount(); i++) {
            theProductTable.setValueAt(false, i, 6);
        }
    }
  
    /**
     * Recalculates the total of all items in the cart
     */
    private void loadCartTotal() {
        DecimalFormat df = new DecimalFormat("#.##");
        cartTotal.setText("$" + df.format(currentUser.getShoppingCart().calculateShoppingCartTotal()));
    }
    
    /**
     * This is used to properly set up our reference array for the stock count for each product in the 
     * MarketPlace. The cart is used as a reference to deduce the amount of items that can be allocated in
     * the buyers shopping cart. The reference array and this function exists as a way of preventing a user
     * from leaving the screen and entering more quantities than exist in the marketplace for a specific item
     */
    private void replaceItemStockCount() {
        DefaultTableModel theProductTable = (DefaultTableModel) productTable.getModel();
        for(int i = 0; i < productTable.getRowCount(); i++) {
            String seller = (String)theProductTable.getValueAt(i, 5);
            Seller theSeller = (Seller)sneakerDataBase.retrieve(seller);
            int quantity = (Integer)theProductTable.getValueAt(i, 3);
            String productID = (String)theProductTable.getValueAt(i, 1);
            
            if(currentUser.getShoppingCart().search(productID)) { 
                itemStockCountForMarketPlace.set(i, quantity - 
                                                currentUser.getShoppingCart().getProduct(productID).getQuantity());
            }
            else {
                itemStockCountForMarketPlace.set(i, quantity);
            }
        }
    }
    // My variable declaration(s) for JFrame
    private final AccountList sneakerDataBase;
    private final Session currentSession;
    private final Customer currentUser;
    ArrayList<Integer> itemStockCountForMarketPlace;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton accountButton;
    private javax.swing.JButton addToCartButton;
    private javax.swing.JTextField cartTotal;
    private javax.swing.JButton clearCartButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton logOutButton;
    private javax.swing.JTable productTable;
    private javax.swing.JButton viewCartButton;
    // End of variables declaration//GEN-END:variables
}
