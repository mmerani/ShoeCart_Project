/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI_Classes;
import Shoe_Cart_Classes.AccountList;
import Shoe_Cart_Classes.List;
import Shoe_Cart_Classes.Product;
import Shoe_Cart_Classes.Seller;
import Shoe_Cart_Classes.Session;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Michael
 */
public class SellerInventoryScreen extends javax.swing.JFrame {

     /**
     * Construct an ListScreen object
     * @param _DataBase an AccountList object
     * @param currentSession a Session object
     */
    public SellerInventoryScreen(AccountList _DataBase, Session currentSession) {
        initComponents();
        sneakerDataBase = _DataBase;
        this.currentSession = currentSession;
        currentUser = (Seller)sneakerDataBase.retrieve(currentSession.getUserInSession());
        this.loadList();
        this.setLocationRelativeTo(null);
        this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        priceLabel = new javax.swing.JLabel();
        productIdLabel = new javax.swing.JLabel();
        quatityLabel = new javax.swing.JLabel();
        invoicePriceLabel = new javax.swing.JLabel();
        typeLabel = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        inventoryTable = new javax.swing.JTable();
        productNameField = new javax.swing.JTextField();
        priceField = new javax.swing.JTextField();
        productIdField = new javax.swing.JTextField();
        quantityField = new javax.swing.JTextField();
        invoicePriceField = new javax.swing.JTextField();
        typeField = new javax.swing.JTextField();
        descriptionField = new javax.swing.JTextField();
        logOutButton = new javax.swing.JButton();
        accountButton = new javax.swing.JButton();
        addItemButton = new javax.swing.JButton();
        updateItemButton = new javax.swing.JButton();
        deleteItemButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        jLabel1.setText("My Inventory");

        jLabel2.setText("Product Name");

        priceLabel.setText("Price");

        productIdLabel.setText("Product ID");

        quatityLabel.setText("Quantity");

        invoicePriceLabel.setText("Total");

        typeLabel.setText("Type");

        jLabel8.setText("Description");

        inventoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product Name", "Product ID", "Product Type", "Quantity", "Invoice Price", "Selling Price", "Quatity To Buy", "Remove/Updatae"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, false, false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(inventoryTable);

        logOutButton.setText("Log Out");
        logOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutButtonActionPerformed(evt);
            }
        });

        accountButton.setText("Account");
        accountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accountButtonActionPerformed(evt);
            }
        });

        addItemButton.setText("Add Item");
        addItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addItemButtonActionPerformed(evt);
            }
        });

        updateItemButton.setText("Update Item");
        updateItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateItemButtonActionPerformed(evt);
            }
        });

        deleteItemButton.setText("Delete Item");
        deleteItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteItemButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(logOutButton)
                        .addGap(193, 193, 193)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 198, Short.MAX_VALUE)
                        .addComponent(accountButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(priceLabel)
                            .addComponent(jLabel2)
                            .addComponent(productIdLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(productNameField)
                            .addComponent(priceField)
                            .addComponent(productIdField, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(typeLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(quatityLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(4, 4, 4))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(invoicePriceLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(invoicePriceField)
                            .addComponent(quantityField)
                            .addComponent(typeField, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(descriptionField))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(104, 104, 104)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(deleteItemButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(addItemButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(updateItemButton)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(accountButton)
                            .addComponent(logOutButton)))
                    .addComponent(jLabel1))
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(quatityLabel)
                    .addComponent(jLabel8)
                    .addComponent(productNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(quantityField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(descriptionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(priceLabel)
                    .addComponent(invoicePriceLabel)
                    .addComponent(priceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(invoicePriceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addItemButton)
                    .addComponent(updateItemButton))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(productIdLabel)
                            .addComponent(typeLabel)
                            .addComponent(productIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(typeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(deleteItemButton)))
                .addGap(31, 31, 31)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void logOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutButtonActionPerformed
            this.dispose();
        SignInScreen backToLoginScreen = new SignInScreen(sneakerDataBase);
        backToLoginScreen.setVisible(true);
    }//GEN-LAST:event_logOutButtonActionPerformed

    private void accountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accountButtonActionPerformed
        this.dispose();
        SellerEditAccount sellersAccount = new SellerEditAccount(sneakerDataBase, currentSession);
        sellersAccount.setVisible(true);
    }//GEN-LAST:event_accountButtonActionPerformed

    private void addItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addItemButtonActionPerformed
             // The following if statements essentially check for empty fields in the textfields
        // Once the fields are all completely filled, the program then grabs the texts in the fields
        // and creates a new row onto the JTable that is display on the screen. The remaining code in the 
        // action event takes the texts in the field and calls the Product constructor and stores the item into
        // the sellers inventory. The textfields then are reset back to empty on the screen
        
        if(productNameField.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "Product Name Field Cannot Be Empty!", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if(productIdField.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "Product ID Field Cannot Be Empty!", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if(quantityField.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "Quantity Field Cannot Be Empty!", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if(invoicePriceField.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "Invoice Price Field Cannot Be Empty!", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if(priceField.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "Selling Price Field Cannot Be Empty!", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if(typeField.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "Product Type Field Cannot Be Empty!", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if(typeField.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "Product Type Field Cannot Be Empty!", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if(descriptionField.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "Product Type Field Cannot Be Empty!", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Add new product to the table
        DefaultTableModel theListTable = (DefaultTableModel) inventoryTable.getModel();
        theListTable.addRow(new Object[]{productNameField.getText(), productIdField.getText(), typeField.getText(), 
                                              Integer.parseInt(quantityField.getText()), Double.parseDouble(invoicePriceField.getText()), 
                                              Double.parseDouble(priceField.getText()), 0, false});
        
        // Store new product added into the users inventory
        List userList = currentUser.getList();
        userList.add(new Product(productNameField.getText(), productIdField.getText(), typeField.getText(), 
                                      Integer.parseInt(quantityField.getText()), Double.parseDouble(invoicePriceField.getText()), 
                                      Double.parseDouble(priceField.getText()), currentUser.getUserName(), 
                                      descriptionField.getText()));
        
        // Reset fields back to empty
        productNameField.setText("");  productIdField.setText("");     typeField.setText(""); 
        quantityField.setText("");     invoicePriceField.setText("");  priceField.setText("");
        descriptionField.setText("");
    }//GEN-LAST:event_addItemButtonActionPerformed

    private void deleteItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteItemButtonActionPerformed
         // To keep things simple most of the same check with the boxes are repeated, and at each instance
        // a check box is found the item is simply removed from the table and from the Sellers inventory
        DefaultTableModel theListTable = (DefaultTableModel) inventoryTable.getModel();
        String productID; List userList = currentUser.getList();

        if(inventoryTable.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "There are no items in inventory to remove", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        for(int i = 0; i < inventoryTable.getRowCount(); i++) {
            boolean isChecked = (boolean)inventoryTable.getValueAt(i, 7);
            if(isChecked) {
                break;
            }
            else if(i == inventoryTable.getRowCount() - 1) {
                JOptionPane.showMessageDialog(null, "No items are selected to remove", "Error", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }

        for(int i = 0; i < inventoryTable.getRowCount(); i++) {
            boolean isChecked = (boolean)inventoryTable.getValueAt(i, 7);

            if(isChecked) {
                productID = (String)theListTable.getValueAt(i, 1);
                userList.remove(productID);
                theListTable.removeRow(i);
                i--;
            }
        }
    }//GEN-LAST:event_deleteItemButtonActionPerformed

    private void updateItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateItemButtonActionPerformed
          // The action performed within this function is the following: Here we have the intention of updating
        // any selected objects. The first thing we do is grab the Sellers inventory, and then we grab all
        // the items that is in the inventory and store it into an ArrayList. There is a check to see if there are
        // any items in the inventory, or if any items are checked at all. Once the two conditions are passed (items
        // exist in the table, and there are checked boxes) there is a for loop that runs through the column on the JTable
        // that contains all the check boxes. This for loop checks to see what boxes are checked. In the instance it finds a checked
        // box, it updates the selected product in inventory with the new edited information.
        
        //If the user attempts to change the quantity of a product and its greater than what is already in stock, a warning is issued
        // and the user is asked to buy more stock for the product. This is accomplished by checking the buy more boxes for a 
        // particular item and entering some quantity
        
        DefaultTableModel theListTable = (DefaultTableModel) inventoryTable.getModel();
        String productID; Product productToEdit; List userList = currentUser.getList(); 
        ArrayList<Product> allItems = currentUser.getList().getAllItems();
        
        if(inventoryTable.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "There are no items in the inventory to update", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        for(int i = 0; i < inventoryTable.getRowCount(); i++) {
            boolean isChecked = (boolean)inventoryTable.getValueAt(i, 7);
            if(isChecked) {
                break;
            }
            else if(i == inventoryTable.getRowCount() - 1) {
                JOptionPane.showMessageDialog(null, "No items are selected to update", "Error", JOptionPane.WARNING_MESSAGE);
                return;
            }
        }
        
        
        for(int i = 0; i < inventoryTable.getRowCount(); i++) {
            boolean isChecked = (boolean)inventoryTable.getValueAt(i, 7);
           
            if(isChecked) {
                productID = allItems.get(i).getID();
                productToEdit = userList.getProductInstance(productID);
                
                if((Integer)theListTable.getValueAt(i, 3) > productToEdit.getQuantity()) {
                    JOptionPane.showMessageDialog(null, "Cannot change quantity greater than whats in stock, please buy some more stock", 
                                                        "Error", JOptionPane.WARNING_MESSAGE);
                    return;
                }   
                productToEdit.setName((String)theListTable.getValueAt(i, 0));
                productToEdit.setID((String)theListTable.getValueAt(i, 1));
                productToEdit.setType((String)theListTable.getValueAt(i, 2));
                productToEdit.setQuantity((Integer)theListTable.getValueAt(i, 3));
                productToEdit.setInvoicePrice((Double)theListTable.getValueAt(i, 4));
                productToEdit.setSellingPrice((Double)theListTable.getValueAt(i, 5));
            }
        }

        JOptionPane.showMessageDialog(null, "Selected Items Have Been Updated", "Successfully Update", JOptionPane.INFORMATION_MESSAGE);
        resetCheckBoxes();
    }//GEN-LAST:event_updateItemButtonActionPerformed

   /**
     * Loads the Sellers inventory onto the JTable in the List Screen
     */
    private void loadList() {
        DefaultTableModel theListTable = (DefaultTableModel) inventoryTable.getModel();
        ArrayList<Product> allItems = currentUser.getList().getAllItems();
        
        // adds rows to the JTable on the screen using the attributes of the Product objects from the Sellers
        // inventory
        for(Product item : allItems) {
            theListTable.addRow(new Object[]{item.getName(), item.getID(), item.getType(), item.getQuantity(),
                                                  item.getInvoicePrice(), item.getSellingPrice(), 0, false});
        }
    }
    
    /**
     * This function resets all the checks boxes on the JTable.
     */
    private void resetCheckBoxes() {
        DefaultTableModel theListTable = (DefaultTableModel) inventoryTable.getModel();
        for(int i = 0; i < inventoryTable.getRowCount(); i++) {
            theListTable.setValueAt(false, i, 7);
        }
    }
    
    private final AccountList sneakerDataBase;
    private final Seller currentUser;
    private final Session currentSession;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton accountButton;
    private javax.swing.JButton addItemButton;
    private javax.swing.JButton deleteItemButton;
    private javax.swing.JTextField descriptionField;
    private javax.swing.JTable inventoryTable;
    private javax.swing.JTextField invoicePriceField;
    private javax.swing.JLabel invoicePriceLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton logOutButton;
    private javax.swing.JTextField priceField;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JTextField productIdField;
    private javax.swing.JLabel productIdLabel;
    private javax.swing.JTextField productNameField;
    private javax.swing.JTextField quantityField;
    private javax.swing.JLabel quatityLabel;
    private javax.swing.JTextField typeField;
    private javax.swing.JLabel typeLabel;
    private javax.swing.JButton updateItemButton;
    // End of variables declaration//GEN-END:variables
}
